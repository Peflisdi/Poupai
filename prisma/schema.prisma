// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== USER & AUTH =====
model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  currency             String    @default("BRL")
  firstDayOfMonth      Int       @default(1)
  defaultPaymentMethod String? // PIX, CASH, DEBIT, CREDIT, TRANSFER
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts             Account[]
  sessions             Session[]
  transactions         Transaction[]
  categories           Category[]
  cards                Card[]
  goals                Goal[]
  installmentPurchases InstallmentPurchase[]
  loans                Loan[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===== CATEGORIES =====
model Category {
  id        String   @id @default(cuid())
  name      String
  icon      String   @default("Circle")
  color     String   @default("#000000")
  budget    Float?
  isDefault Boolean  @default(false)
  userId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent               Category?             @relation("Subcategories", fields: [parentId], references: [id])
  subcategories        Category[]            @relation("Subcategories")
  transactions         Transaction[]
  installmentPurchases InstallmentPurchase[]

  @@map("categories")
}

// ===== TRANSACTIONS =====
model Transaction {
  id                    String   @id @default(cuid())
  type                  String // EXPENSE, INCOME, TRANSFER
  amount                Float
  description           String?
  date                  DateTime
  paymentMethod         String // CASH, DEBIT, CREDIT, PIX
  isRecurring           Boolean  @default(false)
  recurringPeriod       String? // DAILY, WEEKLY, MONTHLY, YEARLY
  receiptUrl            String?
  tags                  String[] @default([])
  paidBy                String? // Nome da pessoa que pagou (para rastrear gastos de terceiros)
  isReimbursed          Boolean  @default(false) // Se já foi reembolsado
  userId                String
  categoryId            String?
  cardId                String?
  installmentPurchaseId String? // Se faz parte de uma compra parcelada
  installmentNumber     Int? // Número da parcela atual (ex: 3 de 12)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category            Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  card                Card?                @relation(fields: [cardId], references: [id], onDelete: SetNull)
  installmentPurchase InstallmentPurchase? @relation(fields: [installmentPurchaseId], references: [id], onDelete: SetNull)

  @@index([userId, date])
  @@index([categoryId])
  @@map("transactions")
}

// ===== CARDS =====
model Card {
  id         String   @id @default(cuid())
  name       String
  nickname   String?
  limit      Float
  closingDay Int // 1-31 (dia do mês)
  dueDay     Int // 1-31 (dia do mês)
  color      String   @default("#000000")
  isDefault  Boolean  @default(false)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions         Transaction[]
  installmentPurchases InstallmentPurchase[]

  @@map("cards")
}

// ===== INSTALLMENT PURCHASES =====
model InstallmentPurchase {
  id                String   @id @default(cuid())
  description       String
  totalAmount       Float
  installments      Int // Número total de parcelas (ex: 12)
  installmentAmount Float // Valor de cada parcela
  startDate         DateTime // Data da primeira parcela
  userId            String
  cardId            String?
  categoryId        String?
  paymentMethod     String   @default("CREDIT") // Método de pagamento da compra parcelada
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  card         Card?         @relation(fields: [cardId], references: [id], onDelete: SetNull)
  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  transactions Transaction[] // Cada parcela é uma transação

  @@map("installment_purchases")
}

// ===== LOANS (Empréstimos) =====
model Loan {
  id           String    @id @default(cuid())
  type         String // LENT (emprestei) ou BORROWED (peguei emprestado)
  personName   String // Nome da pessoa
  description  String? // Descrição opcional
  totalAmount  Float // Valor total do empréstimo
  paidAmount   Float     @default(0) // Quanto já foi pago
  installments Int       @default(1) // Número de parcelas (1 = à vista)
  dueDate      DateTime? // Data de vencimento
  status       String    @default("PENDING") // PENDING, PARTIAL, PAID, OVERDUE
  notes        String? // Notas adicionais
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments LoanPayment[]

  @@index([userId, status])
  @@map("loans")
}

model LoanPayment {
  id        String   @id @default(cuid())
  amount    Float // Valor do pagamento
  date      DateTime @default(now()) // Data do pagamento
  notes     String? // Observações
  loanId    String
  createdAt DateTime @default(now())

  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([loanId])
  @@map("loan_payments")
}

// ===== GOALS (Cofrinhos) =====
model Goal {
  id            String    @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  icon          String    @default("Piggybank")
  color         String    @default("#000000")
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deposits GoalDeposit[]

  @@map("goals")
}

model GoalDeposit {
  id        String   @id @default(cuid())
  amount    Float
  note      String?
  goalId    String
  createdAt DateTime @default(now())

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("goal_deposits")
}
